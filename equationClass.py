# -*- coding: utf-8 -*-
"""CSCI_470_Project_Class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hXw-QNTfLErq0eM4aIdAPNhi4c0dB2y7
"""

from labeldata import loadDict_BA

class equation:
  """A class to store the output of a CNN determining an equation of variable that can be printed to LaTeX code
  """
  
  def __init__(self, vals, states):
    """Class initializer
    
    Args: 
        vals (int list): list of ints that appear represent sequentially appearing characters in the equation
        states (int list): list of states corresponding to each character that denote superscript, subscript, or normal character
    """
    assert len(vals) == len(states),'vals and states should be the same size'
    self.terms = vals
    self.states = states
    self.characters = loadDict_BA("LabelDict.csv")
  
  def appendTerm(self, val, state):
    """Append another term onto the end of an existing equation
    
    Args:
        val (int): Value representing character to append on
        state (int): State of value, 1 = superscript, 0 = normal, -1 = subscript
    """
    self.terms.append(val)
    self.states.append(state)
    
  def printLatex(self):
    """Output a string of LaTeX code that would generate the eqution represented by this object
    """
    
    global specialCharacters
    
    latex = "$"
    prevState = 0
    for index,state in zip(self.terms, self.states):
      # Requires loading of precreated characters array from labeldata
      term = self.characters[index]
      
      # Handle sub/superscript with state
      if prevState != state:
        # Only change states if current state is different than previous
        if prevState == 0:
          if state == 1:
            # Start a superscript from normal
            latex = latex + "^{"
          elif state == -1:
            # Start a supscript from normal
            latex = latex + "_{"
        else:  # previous state was not normal
          if state == 0:
            # End previous special state and enter normal state
            latex = latex + "}"
          elif state == 1:
            # End previous special state and enter superscirpt state
            latex = latex + "}^{"
          elif state == -1:
            # End previous special state and enter supscirpt state
            latex = latex + "}_{"
          
      # Print out term
      if len(term) > 1 or term == "{" or term == "}":
        # If a special character add the corresponding LaTeX shortcut
        latex = latex + "\\"
      latex = latex + term
      prevState = state
    return latex + "$"
